from fastapi import APIRouter, BackgroundTasks, File, Body

from src.config import SUMM_MODELS_FILEPATHS
from src.dependencies import SessionDep
from src.parsers.parsers_selection import get_parsers_sites_urls, remove_parser
from src.summarizers.utils.model_selection import set_model_by_name, get_selected_model_name

admin_router = APIRouter(prefix="/admin", tags=["–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ü§ñ"])


@admin_router.post("/summaries/{cluster_n}", summary="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞—Ç –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞")
async def generate_new_summary(
        cluster_n: int,
        session: SessionDep,
        bg_tasks: BackgroundTasks
):
    return {"status": "OK", "message": "–ö–ª–∞—Å—Ç–µ—Ä —É–¥–∞–ª–µ–Ω"}


@admin_router.get("/models", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π")
def get_available_models():
    return {"available_models": list(SUMM_MODELS_FILEPATHS.keys())}


@admin_router.get("/models/selected", summary="–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
def get_selected_model():
    name = get_selected_model_name()
    return {"selected_model": name}


@admin_router.post("/models/selected", summary="–í—ã–±—Ä–∞—Ç—å –º–æ–¥–µ–ª—å")
def set_model(model_name: str):
    set_model_by_name(model_name)
    return {"status": "OK", "message": "–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"}


@admin_router.get("/parsers", summary="–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞")
def get_all_parsers():
    return {"sites_urls": get_parsers_sites_urls()}


@admin_router.delete("/parsers/{site_url}", summary="–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —Å–∞–π—Ç –∏–∑ –ø–∞—Ä—Å–∏–Ω–≥–∞")
def delete_parser(site_url: str):
    remove_parser(site_url)
    return {"status": "OK", "message": "–ü–∞—Ä—Å–µ—Ä —É–¥–∞–ª–µ–Ω"}


@admin_router.post("/parsers", summary="–ó–∞–≥—Ä—É–∑–∏—Ç—å JSON-—Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–∞—Ä—Å–µ—Ä–∞")
def load_parser():
    pass


@admin_router.get("/data", summary="–ü–æ–ª—É—á–∏—Ç—å .csv —Å—Ç–∞—Ç–µ–π –∏ —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤")
def load_csv_data():
    pass